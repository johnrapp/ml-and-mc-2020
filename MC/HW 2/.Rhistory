plot_image(current_frame)
plot_image(background)
threshold <- 0.2
sd_multiplier <- 800
# sd_multiplier <- 0
background <- readJPEG("./bg.jpg", native=FALSE)
# background_var <- readJPEG("./bg_var.jpg", native=FALSE)
background_subtraction <- function(img, background) {
mask <- array(dim=c(h,w))
for (x in 1:w) {
for (y in 1:h) {
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)])-mean(background[y, x, c(1,2,3)])) < threshold, 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]-background[y, x, c(1,2,3)])) < threshold, 0, 1)
mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier*background_var[y, x], threshold), 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier^2*background_var[y, x], threshold), 0, 1)
}
}
return (mask)
}
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
# current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
# current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
# current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
# current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
# current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
# current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
# current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
# current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
# current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
# current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
# current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
# current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
# current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
threshold <- 0.2
sd_multiplier <- 800
# sd_multiplier <- 0
background <- readJPEG("./bg.jpg", native=FALSE)
# background_var <- readJPEG("./bg_var.jpg", native=FALSE)
background_subtraction <- function(img, background) {
mask <- array(dim=c(h,w))
for (x in 1:w) {
for (y in 1:h) {
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)])-mean(background[y, x, c(1,2,3)])) < threshold, 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]-background[y, x, c(1,2,3)])) < threshold, 0, 1)
mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier*background_var[y, x], threshold), 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier^2*background_var[y, x], threshold), 0, 1)
}
}
return (mask)
}
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
library(jpeg)
# current_frame_nr <- 2000; current_k <- 6 # många personer spridda
# current_frame_nr <- 3000; current_k <- 8 # många personer klumpade
# current_frame_nr <- 5000 # 4 personer spridda
# current_frame_nr <- 4000 # många personer långt borta klumpade
# current_frame_nr <- 200 # många personer spridda
# current_frame_nr <- 2500 # en nära, nåra borta
# current_frame_nr <- 800 # en nära, nåra borta
# current_frame_nr <- 4500 # tre personer, två ihop, en ensam nära
# current_frame_nr <- 20; current_k <- 4 # två nära ihop, två borta ihop
# current_frame_nr <- 3100 # många ihop
# current_frame_nr <- 5600 # tre nära
# current_frame_nr <- 5950 # två nära en vid väggen
# current_frame_nr <- 5750; current_k <- 4#; current_k <- 5 # fem utspridda
current_frame_nr <- 5964-47+2; current_k <- 3 # två spridda, en vid väggen
current_frame <- readJPEG(image_files[current_frame_nr], native=FALSE)
plot_image(current_frame)
threshold <- 0.2
sd_multiplier <- 800
# sd_multiplier <- 0
background <- readJPEG("./bg.jpg", native=FALSE)
# background_var <- readJPEG("./bg_var.jpg", native=FALSE)
background_subtraction <- function(img, background) {
mask <- array(dim=c(h,w))
for (x in 1:w) {
for (y in 1:h) {
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)])-mean(background[y, x, c(1,2,3)])) < threshold, 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]-background[y, x, c(1,2,3)])) < threshold, 0, 1)
mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier*background_var[y, x], threshold), 0, 1)
# mask[y, x] <- ifelse(abs(mean(img[y, x, c(1,2,3)]) - mean(background[y, x, c(1,2,3)])) < max(sd_multiplier^2*background_var[y, x], threshold), 0, 1)
}
}
return (mask)
}
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
sample_solution <- function() {
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
# plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 100000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
est_k <- ks[map_index]
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# render_state(states[[map_index]], foreground)
return (list(
folder=folder,
frame_nr=frame_nr,
frame_k=frame_k,
est_k=est_k,
mode_k=mode(ks)#,
# best_state=states[[map_index]]
))
}
K <- 1000
# sample_solution()
# solutions <- data.frame()
for (i in 1:K) {
solutions <- rbind(solutions, sample_solution())
}
solutions
length(solutions)
nrow(solutions)
248
old_solutions <- solutions[1:248]
old_solutions <- solutions[1:248,]
new_solutions <- solutions[249:309,]
all_solutios <- solutions
plot(solutions$frame_k)
points(solutions$est_k, col="red")
plot(solutions$frame_k, solutions$est_k)
summary(lm(frame_k ~ est_k, data = solutions))
sum(solutions$est_k == solutions$frame_k) / nrow(solutions)
sum(abs(solutions$est_k - solutions$frame_k) <= 1) / nrow(solutions)
sum(abs(solutions$est_k - mean(solutions$est_k)) <= 1) / nrow(solutions)
hist(solutions$est_k - solutions$frame_k)
solutions <- new_solutions
(solutions$frame_k)
points(solutions$est_k, col="red")
plot(solutions$frame_k)
points(solutions$est_k, col="red")
plot(solutions$frame_k, solutions$est_k)
summary(lm(frame_k ~ est_k, data = solutions))
sum(solutions$est_k == solutions$frame_k) / nrow(solutions)
sum(abs(solutions$est_k - solutions$frame_k) <= 1) / nrow(solutions)
sum(abs(solutions$est_k - mean(solutions$est_k)) <= 1) / nrow(solutions)
hist(solutions$est_k - solutions$frame_k)
sum(abs(solutions$est_k - round(mean(solutions$est_k))) <= 1) / nrow(solutions)
plot(solutions$frame_k)
points(solutions$est_k, col="red")
plot(solutions$frame_k, solutions$est_k)
summary(lm(frame_k ~ est_k, data = solutions))
sum(solutions$est_k == solutions$frame_k) / nrow(solutions)
sum(abs(solutions$est_k - solutions$frame_k) <= 1) / nrow(solutions)
sum(abs(solutions$est_k - round(mean(solutions$est_k))) <= 1) / nrow(solutions)
hist(solutions$est_k - solutions$frame_k)
table(solutions$frame_k, solutions$est_k)
points <- data.frame()
for (x in 1:w) {
for (y in 1:h) {
if (foreground[y, x] == 1) {
points <- rbind(points, list(x=x,y=y))
}
}
}
plot(points$x, h-points$y)
clusters <- kmeans(points, current_k)
points(clusters$centers[,1], h-clusters$centers[,2], col="green")
for (k in 1:current_k) {
xc <- clusters$centers[k, 1]
yc <- clusters$centers[k, 2]
ws <- rnorm(50, mean = w_model(yc), sd = w_sd)
hs <- rnorm(50, mean = h_model(yc), sd = h_sd)
rect(
xc-ws/2,
h-(yc-hs/2),
xc+ws/2,
h-(yc+hs/2),
col = rgb(1,0,1,0.01)
)
}
plot_image(current_frame)
xs <- runif(50)
ys <- runif(50)
ws <- rnorm(50, mean = w_model(ys*h), sd = w_sd)/h
hs <- rnorm(50, mean = h_model(ys*h), sd = h_sd)/h
rect(xs - ws/2, 1-(ys - hs/2), xs + ws/2, 1-(ys + ys/2), col=rgb(1,0,0,0.1))
plot(obs$y, obs$w)
points(ys*h, ws*h, col="red")
plot(obs$y, obs$h)
points(ys*h, hs*h, col="red")
plot_image(current_frame)
xs <- runif(50)
ys <- runif(50)
ws <- rnorm(50, mean = w_model(ys*h), sd = w_sd)/h
hs <- rnorm(50, mean = h_model(ys*h), sd = h_sd)/h
rect(xs - ws/2, 1-(ys - hs/2), xs + ws/2, 1-(ys + ys/2), col=rgb(1,0,0,0.1))
plot(obs$y, obs$w)
points(ys*h, ws*h, col="red", title="Width as a function of y")
plot(obs$y, obs$h)
points(ys*h, hs*h, col="red", title="Height as a function of y")
plot_image(current_frame)
xs <- runif(50)
ys <- runif(50)
ws <- rnorm(50, mean = w_model(ys*h), sd = w_sd)/h
hs <- rnorm(50, mean = h_model(ys*h), sd = h_sd)/h
rect(xs - ws/2, 1-(ys - hs/2), xs + ws/2, 1-(ys + ys/2), col=rgb(1,0,0,0.1))
plot(obs$y, obs$w)
points(ys*h, ws*h, col="red", main="Width as a function of y")
plot(obs$y, obs$h)
points(ys*h, hs*h, col="red", main="Height as a function of y")
plot(obs$y, obs$w, main="Width as a function of y")
points(ys*h, ws*h, col="red")
plot(obs$y, obs$h, main="Height as a function of y")
points(ys*h, hs*h, col="red")
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
plot_image(from_grayscale(foreground))
# plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]])
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
plot_image(from_grayscale(foreground))
# plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
plot_image(from_grayscale(foreground))
# plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
plot_image(frame_jpeg)
# plot_image(background)
# states <- run_rjmcmc(foreground, 3000)
#
# ls <- unlist(lapply(states, function(s) { s$posterior }))
# # ks <- unlist(lapply(states, function(s) { s$k }))
# map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
# folder <- sample(1:length(folder_frame_files), 1)
folder <- 2
# frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_nr <- 1520
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
# folder <- sample(1:length(folder_frame_files), 1)
folder <- 2
# frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_nr <- 1519
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
folder_frame_files[[folder]]
folder_frame_files[[§]]
folder_frame_files[[1]]
folder_frame_files[[3]]
folder_frame_files[[4]]
# folder <- sample(1:length(folder_frame_files), 1)
folder <- 4
# frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_nr <- 1519
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
folder_frame_files[[1]]
folder_frame_files[[2]]
folder_frame_files[[3]]
folder_frame_files[[5]]
# folder <- sample(1:length(folder_frame_files), 1)
folder <- 5
# frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_nr <- 2075
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
# folder <- sample(1:length(folder_frame_files), 1)
folder <- 5
# frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_nr <- 2075
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(frame_jpeg, background)
# plot_image(from_grayscale(foreground))
plot_image(frame_jpeg)
# plot_image(background)
states <- run_rjmcmc(foreground, 3000)
ls <- unlist(lapply(states, function(s) { s$posterior }))
# ks <- unlist(lapply(states, function(s) { s$k }))
map_index <- order(ls, decreasing = 1)[1]
render_state(states[[map_index]], foreground)
solutions
nrow(solutions)
solutions <- all_solutios
plot(solutions$frame_k)
points(solutions$est_k, col="red")
plot(solutions$frame_k, solutions$est_k, main = "The estimated k plot against the ground truth value")
summary(lm(frame_k ~ est_k, data = solutions))
sum(solutions$est_k == solutions$frame_k) / nrow(solutions)
sum(abs(solutions$est_k - solutions$frame_k) <= 1) / nrow(solutions)
sum(abs(solutions$est_k - round(mean(solutions$est_k))) <= 1) / nrow(solutions)
hist(solutions$est_k - solutions$frame_k, main = "Histogram of the difference between the estimated k and the ground truth value")
table(solutions$frame_k, solutions$est_k)
nrow(solutions)
mean(solutions$est_k)
sum(abs(solutions$est_k - round(mean(solutions$est_k))) == 1) / nrow(solutions)
plot(ls)
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
plot(ls, col="black", type="l", main="Posterior along MCMC runs")'
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
2
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
ks <- unlist(lapply(states, function(s) { s$k }))
plot(ks, col="black", type="l", main="Value of k along MCMC runs")
