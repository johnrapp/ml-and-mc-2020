render_states <- function(states, indices, title) {
for (s in states[indices]) {
render_state(s, title)
}
}
render_states(states, seq(1,4), "first")
render_states(states, length(states)-seq(1,5)-1, "last")
render_states(states, order(ls, decreasing = 1)[c(seq(1,20))], "best")
render_states(states, order(ls, decreasing = 1)[c(length(states)-seq(1,5)-1)], "worst")
render_states(states, sample(1:length(states), 20), "random")
library(rlist)
sample_state <- function() {
# TODO sample poisson
k_gen <- sample(1:10, 1)
points_gen <- list()
for (k in 1:k_unif) {
xc <- runif(1, 0, w)
yc <- runif(1, 0, h)
ww <- rnorm(1, mean = w_model(yc), sd = w_sd)
hh <- rnorm(1, mean = h_model(yc), sd = h_sd)
points_gen[[k]] <- list(x=xc,y=yc,w=ww,h=hh)
points_gen[[k]]$x <- clamp(xc, ww/2+1, w-ww/2)
points_gen[[k]]$y <- clamp(yc, hh/2+1, h-hh/2)
}
return (list(
k = k_gen,
points = points_gen
))
}
x_sd <- w*.2
y_sd <- h*.2
run_rjmcmc <- function(foreground, initial_state, N=3000) {
posterior <- function (state) {
state_mask <- array(0, dim=c(h, w))
overlap <- 0
for (i in 1:state$k) {
point <- state$points[[i]]
for (x in round(point$x - point$w/2):round(point$x + point$w/2)) {
for (y in round(point$y - point$h/2):round(point$y + point$h/2)) {
if (state_mask[y, x] == 0) {
state_mask[y, x] = 1
} else {
overlap <- overlap + 1
}
}
}
}
N10 <- sum(state_mask == 1 & foreground == 0)
N01 <- sum(state_mask == 0 & foreground == 1)
measures <- c(N10, N01, overlap)
weights <- c(0.005, 0.1, 0.01)
Z <- min(measures %*% weights, 600)
return (exp(-Z) * prior(state))
}
pi_ratio <- function(state_1, state_2) {
state_1$posterior /  state_2$posterior
}
propose_update <- function(state) {
i <- sample(1:state$k, 1)
p <- state$points[[i]]
p$x <- rnorm(1, mean = p$x, sd=x_sd)
p$y <- rnorm(1, mean = p$y, sd=y_sd)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[i]] <- p
return (state)
}
propose_birth <- function(state) {
state$k <- state$k + 1
p <- list(
x = runif(1, 0, w),
y = runif(1, 0, h)
)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[state$k]] <- p
return (state)
}
propose_death <- function(state) {
i <- sample(1:state$k, 1)
state$k <- state$k - 1
state$points <- list.remove(state$points, i)
state$removed <- i
return (state)
}
points_dist <- function(a, b) {
(a$x-b$x)^2 + (a$y-b$y)^2
}
propose_merge <- function(state) {
dists <- array(Inf, dim=c(state$k, state$k))
for (i in 1:(state$k - 1)) {
for (j in (i + 1):state$k) {
pi <- state$points[[i]]
pj <- state$points[[j]]
dists[i, j] <- points_dist(pi, pj)
}
}
remove_i <- floor(which(dists == min(dists)) / state$k)
state$k <- state$k - 1
state$points <- list.remove(state$points, remove_i)
state$removed <- remove_i
return (state)
}
# TODO birth and death proposal probabilities according to poisson
propose <- function(state) {
process <- runif(1)
new_state <- NULL
if (process < 0.1) {
new_state <- propose_birth(state)
} else if (process < 0.175 && state$k > 1) {
new_state <- propose_death(state)
} else if (process < 0.20 && state$k > 1) {
new_state <- propose_merge(state)
} else {
new_state <- propose_update(state)
}
new_state$posterior <- posterior(new_state)
return (new_state)
}
prior <- function(x) {
prob <- 1
for (p in x$points) {
prob <- prob * dnorm(p$w, mean = w_model(p$y), sd = w_sd) * dnorm(p$h, mean = h_model(p$y), sd = h_sd)
}
prob
}
proposal_update_prob <- function(x) {
prior(x)
}
proposal_prob_ratio <- function(x, y) {
k_diff <- y$k - x$k
if (k_diff > 1) {
# Expanded
1 / prior(y$points[y$k])
} else if (k_diff < 1) {
# Contracted
prior(x$points[y$removed]) / 1
} else {
# Updated
proposal_prob(x) / proposal_prob(y)
}
}
initial_state <- sample_state()
# print(initial_state)
initial_state$posterior <- posterior(initial_state)
render_state(initial_state)
states <- metropolis_hastings(
propose,
proposal_prob_ratio,
pi_ratio,
N,
initial_state
)
}
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
# frame_xml <- folder_xmls[[folder]][[frame_nr]]
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
states <- run_rjmcmc(foreground)
library(rlist)
sample_state <- function() {
# TODO sample poisson
k_gen <- sample(1:10, 1)
points_gen <- list()
for (k in 1:k_unif) {
xc <- runif(1, 0, w)
yc <- runif(1, 0, h)
ww <- rnorm(1, mean = w_model(yc), sd = w_sd)
hh <- rnorm(1, mean = h_model(yc), sd = h_sd)
points_gen[[k]] <- list(x=xc,y=yc,w=ww,h=hh)
points_gen[[k]]$x <- clamp(xc, ww/2+1, w-ww/2)
points_gen[[k]]$y <- clamp(yc, hh/2+1, h-hh/2)
}
return (list(
k = k_gen,
points = points_gen
))
}
x_sd <- w*.2
y_sd <- h*.2
run_rjmcmc <- function(foreground, initial_state, N=3000) {
posterior <- function (state) {
state_mask <- array(0, dim=c(h, w))
overlap <- 0
for (i in 1:state$k) {
point <- state$points[[i]]
for (x in round(point$x - point$w/2):round(point$x + point$w/2)) {
for (y in round(point$y - point$h/2):round(point$y + point$h/2)) {
if (state_mask[y, x] == 0) {
state_mask[y, x] = 1
} else {
overlap <- overlap + 1
}
}
}
}
N10 <- sum(state_mask == 1 & foreground == 0)
N01 <- sum(state_mask == 0 & foreground == 1)
measures <- c(N10, N01, overlap)
weights <- c(0.005, 0.1, 0.01)
Z <- min(measures %*% weights, 600)
return (exp(-Z) * prior(state))
}
pi_ratio <- function(state_1, state_2) {
state_1$posterior /  state_2$posterior
}
propose_update <- function(state) {
i <- sample(1:state$k, 1)
p <- state$points[[i]]
p$x <- rnorm(1, mean = p$x, sd=x_sd)
p$y <- rnorm(1, mean = p$y, sd=y_sd)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[i]] <- p
return (state)
}
propose_birth <- function(state) {
state$k <- state$k + 1
p <- list(
x = runif(1, 0, w),
y = runif(1, 0, h)
)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[state$k]] <- p
return (state)
}
propose_death <- function(state) {
i <- sample(1:state$k, 1)
state$k <- state$k - 1
state$points <- list.remove(state$points, i)
state$removed <- i
return (state)
}
points_dist <- function(a, b) {
(a$x-b$x)^2 + (a$y-b$y)^2
}
propose_merge <- function(state) {
dists <- array(Inf, dim=c(state$k, state$k))
for (i in 1:(state$k - 1)) {
for (j in (i + 1):state$k) {
pi <- state$points[[i]]
pj <- state$points[[j]]
dists[i, j] <- points_dist(pi, pj)
}
}
remove_i <- floor(which(dists == min(dists)) / state$k)
state$k <- state$k - 1
state$points <- list.remove(state$points, remove_i)
state$removed <- remove_i
return (state)
}
# TODO birth and death proposal probabilities according to poisson
propose <- function(state) {
process <- runif(1)
new_state <- NULL
if (process < 0.1) {
new_state <- propose_birth(state)
} else if (process < 0.175 && state$k > 1) {
new_state <- propose_death(state)
} else if (process < 0.20 && state$k > 1) {
new_state <- propose_merge(state)
} else {
new_state <- propose_update(state)
}
new_state$posterior <- posterior(new_state)
return (new_state)
}
prior <- function(x) {
prob <- 1
for (p in x$points) {
prob <- prob * dnorm(p$w, mean = w_model(p$y), sd = w_sd) * dnorm(p$h, mean = h_model(p$y), sd = h_sd)
}
prob
}
proposal_update_prob <- function(x) {
prior(x)
}
proposal_prob_ratio <- function(x, y) {
k_diff <- y$k - x$k
if (k_diff > 1) {
# Expanded
1 / prior(y$points[y$k])
} else if (k_diff < 1) {
# Contracted
prior(x$points[y$removed]) / 1
} else {
# Updated
proposal_prob(x) / proposal_prob(y)
}
}
initial_state <- sample_state()
print(initial_state)
initial_state$posterior <- posterior(initial_state)
render_state(initial_state)
states <- metropolis_hastings(
propose,
proposal_prob_ratio,
pi_ratio,
N,
initial_state
)
}
set.seed(2020)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
# frame_xml <- folder_xmls[[folder]][[frame_nr]]
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
states <- run_rjmcmc(foreground)
library(rlist)
sample_state <- function() {
# TODO sample poisson
k_gen <- sample(1:10, 1)
points_gen <- list()
for (k in 1:k_gen) {
xc <- runif(1, 0, w)
yc <- runif(1, 0, h)
ww <- rnorm(1, mean = w_model(yc), sd = w_sd)
hh <- rnorm(1, mean = h_model(yc), sd = h_sd)
points_gen[[k]] <- list(x=xc,y=yc,w=ww,h=hh)
points_gen[[k]]$x <- clamp(xc, ww/2+1, w-ww/2)
points_gen[[k]]$y <- clamp(yc, hh/2+1, h-hh/2)
}
return (list(
k = k_gen,
points = points_gen
))
}
x_sd <- w*.2
y_sd <- h*.2
run_rjmcmc <- function(foreground, initial_state, N=3000) {
posterior <- function (state) {
state_mask <- array(0, dim=c(h, w))
overlap <- 0
for (i in 1:state$k) {
point <- state$points[[i]]
for (x in round(point$x - point$w/2):round(point$x + point$w/2)) {
for (y in round(point$y - point$h/2):round(point$y + point$h/2)) {
if (state_mask[y, x] == 0) {
state_mask[y, x] = 1
} else {
overlap <- overlap + 1
}
}
}
}
N10 <- sum(state_mask == 1 & foreground == 0)
N01 <- sum(state_mask == 0 & foreground == 1)
measures <- c(N10, N01, overlap)
weights <- c(0.005, 0.1, 0.01)
Z <- min(measures %*% weights, 600)
return (exp(-Z) * prior(state))
}
pi_ratio <- function(state_1, state_2) {
state_1$posterior /  state_2$posterior
}
propose_update <- function(state) {
i <- sample(1:state$k, 1)
p <- state$points[[i]]
p$x <- rnorm(1, mean = p$x, sd=x_sd)
p$y <- rnorm(1, mean = p$y, sd=y_sd)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[i]] <- p
return (state)
}
propose_birth <- function(state) {
state$k <- state$k + 1
p <- list(
x = runif(1, 0, w),
y = runif(1, 0, h)
)
p$w <- clamp(rnorm(1, mean = w_model(p$y), sd = w_sd), min_w, w)
p$h <- clamp(rnorm(1, mean = h_model(p$y), sd = h_sd), min_h, h)
p$x <- clamp(p$x, p$w/2+1, w-p$w/2)
p$y <- clamp(p$y, p$h/2+1, h-p$h/2)
state$points[[state$k]] <- p
return (state)
}
propose_death <- function(state) {
i <- sample(1:state$k, 1)
state$k <- state$k - 1
state$points <- list.remove(state$points, i)
state$removed <- i
return (state)
}
points_dist <- function(a, b) {
(a$x-b$x)^2 + (a$y-b$y)^2
}
propose_merge <- function(state) {
dists <- array(Inf, dim=c(state$k, state$k))
for (i in 1:(state$k - 1)) {
for (j in (i + 1):state$k) {
pi <- state$points[[i]]
pj <- state$points[[j]]
dists[i, j] <- points_dist(pi, pj)
}
}
remove_i <- floor(which(dists == min(dists)) / state$k)
state$k <- state$k - 1
state$points <- list.remove(state$points, remove_i)
state$removed <- remove_i
return (state)
}
# TODO birth and death proposal probabilities according to poisson
propose <- function(state) {
process <- runif(1)
new_state <- NULL
if (process < 0.1) {
new_state <- propose_birth(state)
} else if (process < 0.175 && state$k > 1) {
new_state <- propose_death(state)
} else if (process < 0.20 && state$k > 1) {
new_state <- propose_merge(state)
} else {
new_state <- propose_update(state)
}
new_state$posterior <- posterior(new_state)
return (new_state)
}
prior <- function(x) {
prob <- 1
for (p in x$points) {
prob <- prob * dnorm(p$w, mean = w_model(p$y), sd = w_sd) * dnorm(p$h, mean = h_model(p$y), sd = h_sd)
}
prob
}
proposal_update_prob <- function(x) {
prior(x)
}
proposal_prob_ratio <- function(x, y) {
k_diff <- y$k - x$k
if (k_diff > 1) {
# Expanded
1 / prior(y$points[y$k])
} else if (k_diff < 1) {
# Contracted
prior(x$points[y$removed]) / 1
} else {
# Updated
proposal_prob(x) / proposal_prob(y)
}
}
initial_state <- sample_state()
# print(initial_state)
initial_state$posterior <- posterior(initial_state)
render_state(initial_state)
states <- metropolis_hastings(
propose,
proposal_prob_ratio,
pi_ratio,
N,
initial_state
)
}
1+1
set.seed(2020)
folder <- sample(1:length(folder_frame_files), 1)
frame_nr <- sample(1:length(folder_frame_files[[folder]]), 1)
frame_jpeg <- readJPEG(folder_frame_files[[folder]][[frame_nr]], native=FALSE)
# frame_xml <- folder_xmls[[folder]][[frame_nr]]
frame_k <- folder_ks[[folder]][[frame_nr]]
foreground <- background_subtraction(current_frame, background)
plot_image(from_grayscale(foreground))
plot_image(current_frame)
plot_image(background)
states <- run_rjmcmc(foreground)
ls <- c()
ps <- c()
ks <- c()
for (s in states) {
# ls <- c(ls, likelihood(s))
ls <- c(ls, s$posterior)
ps <- c(ps, prior(s))
ks <- c(ks, s$k)
}
# plot(ls, col="black", type="l", ylim=c(0,quantile(c(ls, ps), 0.8)))
plot(ls, col="black", type="l", main="Posterior along MCMC runs")
# lines(ps, col="red")
plot(ks, type="l", main="Number of people along MCMC runs")
hist(ks)
render_states <- function(states, indices, title) {
for (s in states[indices]) {
render_state(s, title)
}
}
render_states(states, seq(1,4), "first")
render_states(states, length(states)-seq(1,5)-1, "last")
render_states(states, order(ls, decreasing = 1)[c(seq(1,20))], "best")
render_states(states, order(ls, decreasing = 1)[c(length(states)-seq(1,5)-1)], "worst")
render_states(states, sample(1:length(states), 20), "random")
1+1
